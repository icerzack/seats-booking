#cloud-config
package_update: true
package_upgrade: true

packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - lsb-release
  - containerd
  - apache2-utils

write_files:
  - path: /etc/modules-load.d/k8s.conf
    content: |
      br_netfilter
      overlay

  - path: /etc/sysctl.d/k8s.conf
    content: |
      net.ipv4.ip_forward = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.bridge.bridge-nf-call-ip6tables = 1

  - path: /etc/containerd/config.toml
    content: |
      version = 2
      
      [plugins]
        [plugins."io.containerd.grpc.v1.cri"]
          sandbox_image = "registry.k8s.io/pause:3.9"
          [plugins."io.containerd.grpc.v1.cri".containerd]
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                runtime_type = "io.containerd.runc.v2"
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                  SystemdCgroup = true

  - path: /root/install-k8s.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e
      # Logging
      exec > >(tee -a /var/log/install-k8s.log) 2>&1
      
      echo "[$(date)] Starting Kubernetes installation"
      
      # Hostname resolution fix
      HOSTNAME=$(hostname)
      echo "127.0.0.1 $HOSTNAME" >> /etc/hosts
      
      # Restart containerd
      systemctl restart containerd
      sleep 5
      
      # Add Kubernetes repo and install
      curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" > /etc/apt/sources.list.d/kubernetes.list
      apt-get update
      apt-get install -y kubelet kubeadm kubectl
      apt-mark hold kubelet kubeadm kubectl
      
      # Create env file to set KUBECONFIG for all users
      echo 'export KUBECONFIG=/etc/kubernetes/admin.conf' > /etc/profile.d/kubeconfig.sh
      chmod +x /etc/profile.d/kubeconfig.sh
      
      # Set KUBECONFIG for current session
      export KUBECONFIG=/etc/kubernetes/admin.conf
      
      # Init Kubernetes
      echo "[$(date)] Initializing Kubernetes cluster..."
      kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=all
      
      # Setup kubectl for root
      mkdir -p /root/.kube
      cp -i /etc/kubernetes/admin.conf /root/.kube/config
      
      # Export join command for convenience
      JOIN_COMMAND=$(kubeadm token create --print-join-command)
      echo "To join more nodes, use this command:" > /root/k8s-join-command.txt
      echo "$JOIN_COMMAND" >> /root/k8s-join-command.txt
      
      # Install Flannel CNI
      echo "[$(date)] Installing Flannel network plugin..."
      kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      
      # Wait for CoreDNS pods to be running (with better error handling)
      echo "[$(date)] Waiting for CoreDNS to be ready..."
      # Give some time for pods to start before checking
      sleep 30
      kubectl -n kube-system get pods -l k8s-app=kube-dns || true
      
      # Allow pods on master
      echo "[$(date)] Removing taint from control-plane node..."
      kubectl taint nodes --all node-role.kubernetes.io/control-plane- || true
      kubectl taint nodes --all node-role.kubernetes.io/master- || true
      
      # Generate remote kubeconfig
      NODE_IP=$(hostname -I | awk '{print $1}')
      echo "[$(date)] Creating remote access kubeconfig file..."
      
      # Create directory for remote access
      mkdir -p /root/k8s
      
      # Create kubeconfig for remote access
      sed "s/127.0.0.1/$NODE_IP/g" /etc/kubernetes/admin.conf > /root/k8s/config
      chmod 644 /root/k8s/config
      
      # Create cluster info file
      cat > /root/k8s/cluster-info.txt << EOL
      ==============================================
      Kubernetes Cluster Information
      ==============================================
      
      API Server: https://$NODE_IP:6443
      
      To access the cluster remotely:
      1. Download the kubeconfig file from this server:
         scp root@$NODE_IP:/root/k8s/config ~/.kube/config
      
      2. Install kubectl on your local machine if not already installed
      
      3. Test the connection:
         kubectl get nodes
      ==============================================
      EOL
      
      echo "[$(date)] Kubernetes installation completed"
      echo "[$(date)] Cluster status:"
      kubectl get nodes

runcmd:
  - modprobe br_netfilter
  - modprobe overlay
  - sysctl --system
  - systemctl restart containerd
  - bash /root/install-k8s.sh

final_message: "Kubernetes cluster setup is complete. Download the kubeconfig file and use 'make deploy' to deploy your application." 